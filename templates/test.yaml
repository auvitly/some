namespace: "test"
title: "generate_func"
doc:
template: |-
  {{- $names := "test/test.go"      | go.AST.P.Files | go.AST.I.Decl.Func.Name "^[A-Z]" | go.AST.I.Decl.Func.Names | go.AST.I.Expr.Ident.Names }} 
  {{- $tests := "test/test_test.go" | go.AST.P.Files | go.AST.I.Decl.Func.Name "^[A-Z]" | go.AST.I.Decl.Func.Names | go.AST.I.Expr.Ident.Names | strings.CutPrefix "Test" }}
  {{- $imports := slice "testing" }}

  {{- if eq (len $tests) 0 }}
    {{- "// Generated by Gopher template. PLEASE EDIT :3\n" | os.OW "test/test_test.go" | void }}
    {{- "package test_test\n\n" | os.W "test/test_test.go" | void }}

    {{- if not (eq (len $imports) 0 )}} 
      {{- "import (" | ln | os.W "test/test_test.go" | void}} 
      {{- range $i, $import := $imports }} 
        {{- printf "\t\"%s\"\n" $import | os.W "test/test_test.go" | void }} 
      {{- end }} 
      {{- ")" | ln | os.W "test/test_test.go" | void}} 
    {{- end }}
  {{- end }}

  {{- range $i, $name := $names }}
  {{- if not (contains $tests $name)  }}
  {{- printf `
  func Test%s(t *testing.T) {
    t.Parallel()

    var tests = []struct{
      Name string
    }{
      {
        Name: "Example name",
      },
    }

    for i := range tests {
      var test = tests[i]

      t.Run(test.Name, func(tt *testing.T) {
        tt.Parallel()

        // Do something! 
      })
    }
  }` $name | ln 
  | os.W "test/test_test.go" | void  
  }}
  {{- end }}
  {{- end }}
